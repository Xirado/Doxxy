package com.freya02.docs;

import com.freya02.bot.utils.DecomposedName;
import com.freya02.docs.data.MethodDoc;
import org.jetbrains.annotations.NotNull;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;

import java.util.List;
import java.util.StringJoiner;
import java.util.regex.Pattern;

public class DocUtils {
	private static final Pattern DUPLICATED_ANNOTATION_PATTERN = Pattern.compile("(@.+)? \\1? (.+) (.+)");

	@NotNull
	public static String getSimpleSignature(@NotNull String elementId) {
		final StringBuilder simpleSignatureBuilder = new StringBuilder();

		final int index = elementId.indexOf('(');
		simpleSignatureBuilder.append(elementId, 0, index);

		final StringJoiner parameterJoiner = new StringJoiner(", ", "(", ")");
		final String[] parameters = elementId.substring(index + 1, elementId.length() - 1).split(",");
		for (String parameter : parameters) {
			if (parameter.isBlank()) continue;

			final String className = DecomposedName.getSimpleClassName(parameter.trim());

			parameterJoiner.add(className);
		}

		simpleSignatureBuilder.append(parameterJoiner);

		return simpleSignatureBuilder.toString();
	}

	@NotNull
	public static String getSimpleAnnotatedSignature(@NotNull MethodDoc methodDoc) {
		final StringBuilder simpleSignatureBuilder = new StringBuilder(methodDoc.getClassDocs().getClassName() + "#" + methodDoc.getMethodName());

		final StringJoiner parameterJoiner = new StringJoiner(", ", "(", ")").setEmptyValue("()");
		final String methodParameters = methodDoc.getMethodParameters();
		if (methodParameters != null) {
			final String[] parameters = methodParameters.substring(1, methodParameters.length() - 1).split(",");

			for (String parameter : parameters) {
				if (parameter.isBlank()) continue;

				final String trim = DUPLICATED_ANNOTATION_PATTERN.matcher(parameter.trim()).replaceAll("$1 $2 $3"); //Fix duplicated annotations
				parameterJoiner.add(trim);
			}
		}

		simpleSignatureBuilder.append(parameterJoiner);

		return simpleSignatureBuilder.toString();
	}

	@SuppressWarnings("BooleanMethodIsAlwaysInverted")
	public static boolean isJavadocVersionCorrect(@NotNull Document document) {
		final Element head = document.selectFirst("head");
		if (head == null) return false;

		final List<Node> nodes = head.childNodes();
		if (nodes.size() < 2) return false;

		return nodes.get(1).attr("#comment").contains("Generated by javadoc (17)");
	}

	@NotNull
	public static String fixReturnType(MethodDoc methodDoc) {
		return methodDoc.getMethodReturnType()
				.replaceAll("@\\w*?", "")
				.trim();
	}
}
